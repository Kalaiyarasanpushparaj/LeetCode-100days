class MyCircularQueue {
    private final Node head, tail;
    private final int n;
    private int size;

    public MyCircularQueue(final int k) {
        this.head = new Node(-1);
        this.tail = new Node(-1);
        
        head.next = tail;
        tail.prev = head;

        this.n = k;
        this.size = 0;
    }
    
    public boolean enQueue(final int value) {
        if(isFull())
            return false;

        final Node node = new Node(value);

        node.prev = head;
        node.next = head.next;

        head.next.prev = node;
        head.next = node;

        size++;

        return true;
    }
    
    public boolean deQueue() {
        if(isEmpty())
            return false;

        final Node node = tail.prev;

        tail.prev.prev.next = tail;
        tail.prev = tail.prev.prev;

        size--;

        return true;
    }
    
    public int Front() {
        if(isEmpty())
            return -1;

        return tail.prev.val;
    }
    
    public int Rear() {
        if(isEmpty())
            return -1;

        return head.next.val;
    }
    
    public boolean isEmpty() {
        return head.next == tail;
    }
    
    public boolean isFull() {
        return n <= size;
    }

    public class Node {
        public Node prev, next;
        public final int val;

        public Node(final int val) {
            this.val = val;
        }
    }
}
